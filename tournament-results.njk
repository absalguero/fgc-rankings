---
permalink: "tournament-results/index.html"
---
{% extends "layout.njk" %}

<meta name="description" content="Official tournament results for FGC Street Fighter tournaments. Browse player finishes, view event dates, and filter by player name or event.">

{% block head %}
    <style>
        /* All styles for the tournament table go here */
        .content-container {
            width: 100%;
            box-sizing: border-box;
            color: #f0f0f0;
            font-family: 'Inter', sans-serif;
        }

        .content-container h1 {
            margin-top: 0;
            color: #FF5E13;
            font-family: 'Permanent Marker', cursive;
            font-size: 3rem;
            text-align: center;
        }

        .content-container .controls-container {
            display: flex;
            justify-content: center;
            margin-bottom: 1.5rem;
        }
        
        .content-container #search-input {
            width: 100%;
            max-width: 400px;
            padding: 0.75rem;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #666;
            background-color: #333;
            color: #fff;
            outline: none;
            text-align: center;
            transition: background-color 0.3s, border-color 0.3s;
        }

        .content-container #search-input:focus {
            background-color: #444;
            border-color: #FF5E13;
        }
        
        .content-container #search-input::placeholder {
            color: #d4d4d4;
            transition: color 0.3s;
        }
        
        .content-container .table-wrapper {
            overflow: hidden;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .content-container #tournament-results-table {
            width: 100%;
            border-collapse: collapse;
            font-family: Arial, sans-serif;
        }

        .content-container #tournament-results-table thead th {
            background-color: transparent;
            color: #ffffff;
            padding: 1.2rem 1rem;
            text-align: left;
            font-weight: bold;
            cursor: pointer;
            border-bottom: 2px solid #444;
            text-align: center;
            transition: background-color 0.2s;
            position: relative;
        }
        
        .content-container #tournament-results-table thead th:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .content-container #tournament-results-table thead th .sort-icon {
            opacity: 0.3;
            transition: opacity 0.2s;
            margin-left: 0.5rem;
            vertical-align: middle;
        }
        
        .content-container #tournament-results-table thead th:hover .sort-icon {
            opacity: 0.8;
        }
        
        .content-container #tournament-results-table thead th.sorted .sort-icon {
            opacity: 1;
        }
        
        .content-container #tournament-results-table tbody tr {
            background-color: #111;
            transition: background-color 0.2s;
        }

        .content-container #tournament-results-table tbody tr:nth-child(even) {
            background-color: #1a1a1a;
        }
        
        .content-container #tournament-results-table tbody tr:hover {
            background-color: #404040;
        }

        .content-container #tournament-results-table td {
            padding: 1rem;
            color: #e0e0e0;
            border-bottom: 1px solid #444;
            text-align: center;
            word-break: normal;
        }
        
        .content-container #tournament-results-table .player-cell {
            white-space: nowrap;
            min-width: 200px;
        }
        
        .rank-1 td {
            background-color: #ffd70030;
            color: gold;
            text-shadow: 0 0 4px gold;
        }
        .rank-2 td {
            background-color: #c0c0c030;
            color: silver;
            text-shadow: 0 0 4px silver;
        }
        .rank-3 td {
            background-color: #cd7f3230;
            color: #cd7f32;
            text-shadow: 0 0 4px #cd7f32;
        }
        .rank-4 td {
            background-color: #4b371c30;
            color: #8c7359;
            text-shadow: 0 0 4px #8c7359;
        }
        .rank-5 td {
            background-color: #36454F30;
            color: #b0c4de;
            text-shadow: 0 0 4px #b0c4de;
        }
        
        .rank-1 .player-icon,
        .rank-1 .character-icon,
        .rank-1 .flag-icon {
            box-shadow: 0 0 6px 1px gold;
        }

        .rank-2 .player-icon,
        .rank-2 .character-icon,
        .rank-2 .flag-icon {
            box-shadow: 0 0 6px 1px silver;
        }

        .rank-3 .player-icon,
        .rank-3 .character-icon,
        .rank-3 .flag-icon {
            box-shadow: 0 0 6px 1px #cd7f32;
        }

        .rank-4 .player-icon,
        .rank-4 .character-icon,
        .rank-4 .flag-icon {
            box-shadow: 0 0 6px 1px #8c7359;
        }

        .rank-5 .player-icon,
        .rank-5 .character-icon,
        .rank-5 .flag-icon {
            box-shadow: 0 0 6px 1px #b0c4de;
        }
        
        .ranked-6-40 {
            font-weight: bold;
            color: #d5e8d8 !important;
            text-shadow: 0 0 4px #b8d9bf;
            background-color: rgba(0, 61, 41, 0.6) !important;
        }
        
        .pagination-info-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 1rem;
            gap: 0.5rem;
        }

        .content-container .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
        }

        .content-container .pagination-btn {
            background-color: #444;
            color: #fff;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .content-container .pagination-btn:hover:not(:disabled) {
            background-color: #555;
        }

        .content-container .pagination-btn:disabled {
            background-color: #333;
            color: #666;
            cursor: not-allowed;
        }
        
        .content-container #page-info {
            font-size: 1.25rem;
            font-weight: bold;
            color: #FF5E13;
            text-shadow: 0 0 5px rgba(255, 94, 19, 0.75);
            text-align: center;
        }
        
        .content-container .show-details-btn {
            background-color: #555;
            color: #fff;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            width: 100%;
            margin-top: 0.5rem;
            display: none;
        }
        
        .content-container .show-details-btn:hover {
            background-color: #666;
        }

        #back-to-top-btn {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 99;
            border: none;
            outline: none;
            background-color: #FF5E13;
            color: white;
            cursor: pointer;
            padding: 15px;
            border-radius: 50%;
            font-size: 18px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: background-color 0.3s;
        }

        #back-to-top-btn:hover {
            background-color: #FF8A5E;
        }
        
        .loading-message {
            text-align: center;
            padding: 2rem;
            font-size: 1.25rem;
            color: #FF5E13;
        }

        /* Mobile styles */
        @media (max-width: 768px) {
            .content-container {
                padding: 1rem;
            }
            .content-container h1 {
                font-size: 1.5rem;
            }
            .content-container #search-input {
                font-size: 0.9rem;
            }
            .content-container #tournament-results-table thead {
                display: none;
            }
            .content-container #tournament-results-table, 
            .content-container #tournament-results-table tbody, 
            .content-container #tournament-results-table tr, 
            .content-container #tournament-results-table td {
                display: block;
                width: 100%;
            }
            .content-container #tournament-results-table tr {
                margin-bottom: 0.75rem;
                border-radius: 8px;
                overflow: hidden;
                border: 1px solid #444;
                padding-bottom: 0;
            }
            .content-container #tournament-results-table td {
                text-align: right;
                padding-left: 50%;
                position: relative;
                border-bottom: 1px solid #444;
            }

            /* Correctly collapsing the mobile view */
            .content-container #tournament-results-table td::before {
                content: attr(data-label);
                position: absolute;
                left: 1rem;
                width: calc(50% - 1.5rem);
                text-align: left;
                font-weight: bold;
                color: #aaa;
            }
            .content-container #tournament-results-table td[data-label="Date"],
            .content-container #tournament-results-table td[data-label="Entrants"] {
                display: none;
            }
            
            .content-container .show-details-btn {
                display: block;
            }

            .content-container tr.expanded .hidden-on-mobile {
                display: block;
            }
            
            .content-container tr.expanded .show-details-btn {
                background-color: #666;
            }
        }
    </style>
{% endblock %}

{% block content %}
    <h1 style="margin-top: 0;">Tournament Results</h1>
    
    <div class="controls-container">
        <input type="text" id="search-input" placeholder="Search by Player or Event..." title="Type to search for a player or event.">
    </div>

    <div class="table-wrapper">
        <table id="tournament-results-table">
            <thead>
                <tr>
                    <th data-column-name="Event" data-type="string">Event
                        <span class="sort-icon asc-icon">
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </span>
                    </th>
                    <th data-column-name="Date" data-type="string" class="hidden-on-mobile">Date
                        <span class="sort-icon asc-icon">
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </span>
                    </th>
                    <th data-column-name="Entrants" data-type="number" class="hidden-on-mobile">Entrants
                        <span class="sort-icon asc-icon">
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </span>
                    </th>
                    <th data-column-name="Player" data-type="string" class="player-cell">Player
                        <span class="sort-icon asc-icon">
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </span>
                    </th>
                    <th data-column-name="Finish" data-type="finish">Finish
                        <span class="sort-icon asc-icon">
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </span>
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                <tr><td colspan="5" class="loading-message">Loading results...</td></tr>
            </tbody>
        </table>
    </div>
    
    <div class="pagination-info-container">
        <span id="page-info"></span>
        <div class="pagination-container">
            <button id="prev-page-btn" class="pagination-btn">Previous Event</button>
            <button id="next-page-btn" class="pagination-btn">Next Event</button>
        </div>
    </div>
    
    <button id="back-to-top-btn" title="Go to top">▲</button>
{% endblock %}

{% block scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const googleSheetURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQBIqTU9Vjqm4lAYt4gGj4QMaxG4eXSsgbDzi2GVHVvrZX0Dba6b1_SlyrVI9ARnlG-xc_b0NVq5lmU/pub?gid=332201631&single=true&output=csv";
            const googleRankingsURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQBIqTU9Vjqm4lAYt4gGj4QMaxG4eXSsgbDzi2GVHVvrZX0Dba6b1_SlyrVI9ARnlG-xc_b0NVq5lmU/pub?gid=1862929315&single=true&output=csv";

            const tableBody = document.getElementById('table-body');
            const searchInput = document.getElementById('search-input');
            const prevBtn = document.getElementById('prev-page-btn');
            const nextBtn = document.getElementById('next-page-btn');
            const pageInfo = document.getElementById('page-info');
            const backToTopBtn = document.getElementById('back-to-top-btn');

            let allData = [];
            let groupedDataByEvent = {};
            let uniqueEvents = [];
            let currentEventIndex = 0;
            let searchTerm = '';
            let sortedColumn = 'Finish';
            let sortDirection = 'asc';
            let rankingsMap = {};

            function sortData(data, column, type, direction) {
                if (!data || !column) {
                    return data;
                }
                const order = direction === 'asc' ? 1 : -1;
                return data.sort((a, b) => {
                    const valA = a[column];
                    const valB = b[column];
                    
                    if (type === 'finish') {
                        const numA = parseFloat(valA.replace('st', '').replace('nd', '').replace('rd', '').replace('th', ''));
                        const numB = parseFloat(valB.replace('st', '').replace('nd', '').replace('rd', '').replace('th', ''));
                        if (!isNaN(numA) && !isNaN(numB)) {
                            const finishComparison = (numA - numB) * order;
                            if (finishComparison !== 0) {
                                return finishComparison;
                            }
                            const dateA = new Date(a.Date);
                            const dateB = new Date(b.Date);
                            return (dateB - dateA);
                        }
                    } else if (type === 'number') {
                             return (valA - valB) * order;
                    }
                    
                    if (valA < valB) return -1 * order;
                    if (valA > valB) return 1 * order;
                    return 0;
                });
            }

            async function fetchData() {
                try {
                    await fetchRankings();
                    const response = await fetch(googleSheetURL);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const text = await response.text();
                    allData = parseCSV(text);
                    groupDataByEvent(allData);
                    renderAll();
                } catch (error) {
                    console.error("Error fetching data:", error);
                    tableBody.innerHTML = '<tr><td colspan="5" class="loading-message" style="color: red;">Failed to load data. Please try again later.</td></tr>';
                }
            }

            async function fetchRankings() {
                try {
                    const response = await fetch(googleRankingsURL);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const text = await response.text();
                    const lines = text.trim().split('\n');
                    if (lines.length <= 1) return;
                    
                    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                    const playerHeader = headers.find(h => h.toLowerCase().includes('player') || h.toLowerCase().includes('name'));
                    const rankingHeader = headers.find(h => h.toLowerCase().includes('ranking') || h.toLowerCase().includes('rank'));
                    
                    if (!playerHeader || !rankingHeader) {
                        console.error("Could not find 'Player' or 'Ranking' headers in the CSV data.");
                        return;
                    }

                    const rankingsData = lines.slice(1).map(line => {
                        const values = line.split(',').map(v => v.trim().replace(/"/g, ''));
                        const row = {};
                        headers.forEach((h, i) => row[h] = values[i]);
                        return row;
                    }).filter(row => row[playerHeader] && row[rankingHeader] !== '');

                    rankingsMap = rankingsData.reduce((acc, current) => {
                        const playerName = current[playerHeader];
                        const playerRank = parseInt(current[rankingHeader], 10);
                        if (playerName && !isNaN(playerRank)) {
                            acc[playerName] = playerRank;
                        }
                        return acc;
                    }, {});
                } catch (error) {
                    console.error("Error fetching rankings data:", error);
                }
            }
            
            function renderAll() {
                let dataToRender = [];

                if (searchTerm) {
                    dataToRender = allData.filter(item => {
                        const eventName = (item.Event || '').toLowerCase();
                        const playerName = (item.Player || '').toLowerCase();
                        return eventName.includes(searchTerm) || playerName.includes(searchTerm);
                    });
                } else {
                    const currentEventName = uniqueEvents[currentEventIndex];
                    dataToRender = [...(groupedDataByEvent[currentEventName] || [])];
                }
                
                const headerElement = document.querySelector(`[data-column-name="${sortedColumn}"]`);
                const sortedType = headerElement ? headerElement.getAttribute('data-type') : null;
                dataToRender = sortData(dataToRender, sortedColumn, sortedType, sortDirection);

                renderTable(dataToRender);
                updatePaginationControls(dataToRender.length);
                updateHeaderIcons();
            }

            function renderTable(data) {
                tableBody.innerHTML = '';
                if (!data || data.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="5" class="loading-message">No results found.</td></tr>';
                } else {
                    data.forEach(item => {
                        const row = document.createElement('tr');
                        let playerText = item.Player || '';
                        const playerRank = rankingsMap[playerText];
                        
                        if (playerRank === 1) row.classList.add('rank-1');
                        else if (playerRank === 2) row.classList.add('rank-2');
                        else if (playerRank === 3) row.classList.add('rank-3');
                        else if (playerRank === 4) row.classList.add('rank-4');
                        else if (playerRank === 5) row.classList.add('rank-5');
                        else if (playerRank >= 6 && playerRank <= 40) row.classList.add('ranked-6-40');
                        
                        if (playerRank && playerRank <= 40) {
                            playerText = `${playerText} (#${playerRank})`;
                        }

                        row.innerHTML = `
                            <td data-label="Event">${item.Event || ''}</td>
                            <td data-label="Date" class="hidden-on-mobile">${formatDate(item.Date)}</td>
                            <td data-label="Entrants" class="hidden-on-mobile">${item.Entrants || ''}</td>
                            <td data-label="Player" class="player-cell">${playerText}</td>
                            <td data-label="Finish">${item.Finish || ''}</td>
                            <td class="mobile-details-cell"><button class="show-details-btn">Show Details</button></td>
                        `;
                        tableBody.appendChild(row);
                    });

                    document.querySelectorAll('.show-details-btn').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const row = event.target.closest('tr');
                            row.classList.toggle('expanded');
                            event.target.textContent = row.classList.contains('expanded') ? 'Hide Details' : 'Show Details';
                        });
                    });
                }
            }

            function updateHeaderIcons() {
                const headers = document.querySelectorAll('.content-container #tournament-results-table thead th');
                headers.forEach(header => {
                    const columnName = header.getAttribute('data-column-name');
                    const icon = header.querySelector('.sort-icon');
                    
                    if (columnName === sortedColumn) {
                        header.classList.add('sorted');
                        if (sortDirection === 'asc') {
                            icon.innerHTML = `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>`;
                        } else {
                            icon.innerHTML = `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-up"><polyline points="18 15 12 9 6 15"></polyline></svg>`;
                        }
                    } else {
                        header.classList.remove('sorted');
                        icon.innerHTML = `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>`;
                    }
                });
            }

            function updatePaginationControls(filteredCount) {
                if (searchTerm) {
                    pageInfo.textContent = `Showing ${filteredCount} results`;
                    prevBtn.disabled = true;
                    nextBtn.disabled = true;
                } else {
                    const totalEvents = uniqueEvents.length;
                    if (totalEvents > 0) {
                        pageInfo.textContent = `Event: ${uniqueEvents[currentEventIndex]} (${currentEventIndex + 1} of ${totalEvents})`;
                    } else {
                        pageInfo.textContent = '';
                    }
                    prevBtn.disabled = currentEventIndex === 0;
                    nextBtn.disabled = currentEventIndex === totalEvents - 1 || totalEvents === 0;
                }
            }

            function formatDate(dateString) {
                if (!dateString) return '';
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                return date.toLocaleDateString('en-US', options);
            }

            function parseCSV(text) {
                const lines = text.trim().split('\n');
                if (lines.length <= 1) return [];
                const headers = lines[0].split(',').map(header => header.trim().replace(/"/g, ''));
                const data = lines.slice(1).map(line => {
                    const values = line.split(',').map(value => value.trim().replace(/"/g, ''));
                    const row = {};
                    headers.forEach((header, i) => {
                        row[header] = values[i];
                    });
                    return row;
                }).filter(row => row.Player && row.Player !== '');
                return data;
            }

            function groupDataByEvent(data) {
                const groupedData = {};
                const eventDates = {};
                data.forEach(row => {
                    const eventName = row.Event;
                    if (eventName) {
                        if (!groupedData[eventName]) {
                            groupedData[eventName] = [];
                            eventDates[eventName] = new Date(row.Date);
                        }
                        groupedData[eventName].push(row);
                    }
                });
                groupedDataByEvent = groupedData;
                uniqueEvents = Object.keys(groupedData).sort((a, b) => eventDates[b] - eventDates[a]);
            }

            const headers = document.querySelectorAll('.content-container #tournament-results-table thead th');
            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const columnName = header.getAttribute('data-column-name');
                    if (sortedColumn === columnName) {
                        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
                    } else {
                        sortedColumn = columnName;
                        if (columnName === 'Date' || columnName === 'Entrants') {
                            sortDirection = 'desc';
                        } else {
                            sortDirection = 'asc';
                        }
                    }
                    renderAll();
                });
            });

            searchInput.addEventListener('input', (e) => {
                searchTerm = e.target.value.toLowerCase();
                renderAll();
            });

            prevBtn.addEventListener('click', () => {
                if (currentEventIndex > 0) {
                    currentEventIndex--;
                    renderAll();
                }
            });

            nextBtn.addEventListener('click', () => {
                if (currentEventIndex < uniqueEvents.length - 1) {
                    currentEventIndex++;
                    renderAll();
                }
            });
            
            window.addEventListener('scroll', () => {
                if (window.scrollY > 300) {
                    backToTopBtn.style.display = 'block';
                } else {
                    backToTopBtn.style.display = 'none';
                }
            });

            backToTopBtn.addEventListener('click', () => {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });

            fetchData();
        });
    </script>
{% endblock %}