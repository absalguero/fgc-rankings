{% extends "layout.njk" %}

{% block content %}
  <div class="content-container">
    <h1 style="margin-top: 0;">Street Fighter 6 Rankings</h1>
    <h2>Last Updated: August 11, 2025</h2>

    <div class="table-wrapper">
      <table id="rankings-table">
        <thead>
          <tr>
            <th data-column-index="0" data-type="number" data-sort-direction="desc">
              <span>Rank
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
            <th data-column-index="1" data-type="string">
              <span>Change
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
            <th data-column-index="2" data-type="string">
              <span>Player
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
            <th data-column-index="3" data-type="string">
              <span>Main<br>Character
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
            <th data-column-index="4" data-type="string">
              <span>Region
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
            <th data-column-index="5" data-type="number">
              <span>Points
                <svg class="sort-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 5V19"/>
                  <path d="M19 12L12 19L5 12"/>
                </svg>
              </span>
            </th>
          </tr>
        </thead>
        <tbody>
          </tbody>
      </table>
    </div>

    <div class="load-more-container">
        <button id="load-more-btn" class="load-more-btn" style="display:none;">Load More</button>
    </div>
  </div>

  <style>
    /* Global styles for robust responsiveness */
    html, body {
      box-sizing: border-box;
      max-width: 100%;
      overflow-x: hidden;
    }
    *, *:before, *:after {
      box-sizing: inherit;
    }
    
    th {
      cursor: pointer;
      position: relative;
      font-size: 1.1rem;
    }
    th span {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    th:hover {
      background-color: rgba(0, 0, 0, 0.1);
    }
    .sort-icon {
      margin-left: 5px;
      opacity: 0.3;
      transform: rotate(0deg);
      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
    }
    th:hover .sort-icon {
      opacity: 0.6;
    }
    th.sorted-asc .sort-icon {
      transform: rotate(180deg);
      opacity: 1;
    }
    th.sorted-desc .sort-icon {
      transform: rotate(0deg);
      opacity: 1;
    }
    tr[data-rank="1"] td {
      background-color: #ffd70030;
      color: gold;
    }
    tr[data-rank="2"] td {
      background-color: #c0c0c030;
      color: silver;
    }
    tr[data-rank="3"] td {
      background-color: #cd7f3230;
      color: #cd7f32;
    }

    /* Restored Character Image Styles */
    .character-cell {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      gap: 10px;
    }

    .character-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      border: 1px solid #ddd;
    }
    
    td {
      font-size: 1rem;
    }

    /* NEW: Styling for the Load More button to match the site's theme */
    .load-more-container {
        text-align: center;
        margin: 20px 0;
    }
    .load-more-btn {
        background-color: #FF5E13; /* Your theme's fire-orange color */
        border: none;
        color: #222; /* Dark grey to match background */
        padding: 10px 24px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s, transform 0.2s;
        font-family: 'Permanent Marker', cursive;
        text-transform: uppercase;
        box-shadow: 0 4px #c24600; /* Darker orange for a 3D effect */
        letter-spacing: 1px;
    }
    .load-more-btn:hover {
        background-color: #e6520d;
        transform: translateY(1px);
        box-shadow: 0 3px #c24600;
    }
    .load-more-btn:active {
        transform: translateY(3px);
        box-shadow: 0 1px #c24600;
    }

    /* Mobile Styles (Card Layout) */
    @media screen and (max-width: 768px) {
      .content-container, .table-wrapper {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
      }
      table {
        border: 0;
        width: 100%;
        min-width: unset;
        border-collapse: separate;
        border-spacing: 0 1rem;
      }
      table thead {
        display: none;
      }
      table tr {
        display: block;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        text-align: right;
        font-size: 1.2em;
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem 1rem;
      }
      table td:last-child {
        border-bottom: 0;
      }
      .character-cell {
        justify-content: flex-end;
      }
      .table-wrapper {
        overflow-x: hidden;
      }
      .load-more-btn {
        width: 100%;
      }
    }
    /* Restored Table Minimum Width for Desktop */
    @media screen and (min-width: 769px) {
      table {
        min-width: 600px;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const sheetURL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQBIqTU9Vjqm4lAYt4gGj4QMaxG4eXSsgbDzi2GVHVvrZX0Dba6b1_SlyrVI9ARnlG-xc_b0NVq5lmU/pub?gid=1862929315&single=true&output=csv';
      const table = document.getElementById('rankings-table');
      const tbody = table.querySelector('tbody');
      const headers = table.querySelectorAll('th');
      const loadMoreBtn = document.getElementById('load-more-btn');

      let allPlayers = [];
      let playersToShow = 10;
      const playersPerLoad = 10;
      const maxPlayers = 40;

      function setupSorting() {
        headers.forEach(header => {
          header.addEventListener('click', () => {
            const columnIndex = parseInt(header.getAttribute('data-column-index'));
            const dataType = header.getAttribute('data-type');
            let sortDirection = header.getAttribute('data-sort-direction') || 'asc';
            const newSortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            header.setAttribute('data-sort-direction', newSortDirection);
      
            headers.forEach(h => {
              h.classList.remove('sorted-asc', 'sorted-desc');
            });
            header.classList.add(`sorted-${newSortDirection}`);
      
            const rows = Array.from(tbody.querySelectorAll('tr'));
            rows.sort((a, b) => {
              const aValue = a.children[columnIndex].textContent.trim();
              const bValue = b.children[columnIndex].textContent.trim();
              
              let compareA = aValue;
              let compareB = bValue;
      
              if (dataType === 'number') {
                compareA = parseFloat(aValue) || 0;
                compareB = parseFloat(bValue) || 0;
              }
      
              if (newSortDirection === 'asc') {
                if (compareA < compareB) return -1;
                if (compareA > compareB) return 1;
              } else {
                if (compareA > compareB) return -1;
                if (compareA < compareB) return 1;
              }
              return 0;
            });
            rows.forEach(row => tbody.appendChild(row));
          });
        });
      }

      function createRowHtml(player) {
        const changeSpan = (() => {
          const change = player['Rank Change'];
          if (change === 'New') return `<span style="color: #007bff;">New</span>`;
          if (change.startsWith('+')) return `<span style="color: green;">${change}</span>`;
          if (change.startsWith('-')) return `<span style="color: red;">${change}</span>`;
          return `<span style="color: #6c757d;">${change}</span>`;
        })();
      
        return `
          <td data-label="Rank">${player['Rank']}</td>
          <td data-label="Change">${changeSpan}</td>
          <td data-label="Player">${player['Player']}</td>
          <td data-label="Character">
            <div class="character-cell">
              <img src="/images/characters/${player['Main Character'].toLowerCase()}.png" alt="${player['Main Character']}" class="character-icon" onerror="this.src='https://placehold.co/40x40/aaa/fff?text=N/A';">
              <span>${player['Main Character']}</span>
            </div>
          </td>
          <td data-label="Region">${player['Region']}</td>
          <td data-label="Points">${player['Points']}</td>
        `;
      }

      function renderTable(playersToRender) {
        tbody.innerHTML = '';
        playersToRender.forEach(player => {
          if (player['Rank']) {
            const row = document.createElement('tr');
            if (player['Rank'] === '1' || player['Rank'] === '2' || player['Rank'] === '3') {
              row.setAttribute('data-rank', player['Rank']);
            }
            row.innerHTML = createRowHtml(player);
            tbody.appendChild(row);
          }
        });
      }

      function appendMorePlayers(playersToAppend) {
        playersToAppend.forEach(player => {
          if (player['Rank']) {
            const row = document.createElement('tr');
            if (player['Rank'] === '1' || player['Rank'] === '2' || player['Rank'] === '3') {
              row.setAttribute('data-rank', player['Rank']);
            }
            row.innerHTML = createRowHtml(player);
            tbody.appendChild(row);
          }
        });
      }

      function loadMorePlayers() {
        const nextPlayersToShow = playersToShow + playersPerLoad;
        const newPlayers = allPlayers.slice(playersToShow, nextPlayersToShow);
        
        appendMorePlayers(newPlayers);
        
        playersToShow += newPlayers.length;

        if (playersToShow >= maxPlayers || playersToShow >= allPlayers.length) {
          loadMoreBtn.style.display = 'none';
        }
      }

      async function fetchDataAndRenderTable() {
        try {
          tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">Loading data...</td></tr>';
          
          // Append a cache-busting parameter to force a fresh fetch every 10 minutes
          const cacheBuster = Math.floor(Date.now() / (1000 * 60 * 10)); // Current 10-minute interval
          const urlWithCacheBuster = `${sheetURL}&cachebuster=${cacheBuster}`;

          const response = await fetch(urlWithCacheBuster);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const csvText = await response.text();

          const rows = csvText.trim().split('\n').map(row => row.split(','));
          const headers = rows[0].map(h => h.trim().replace(/"/g, ''));
          const rawPlayers = rows.slice(1).map(row => {
            const player = {};
            row.forEach((value, i) => {
              player[headers[i]] = value.trim().replace(/"/g, '');
            });
            return player;
          });
          
          allPlayers = rawPlayers.slice(0, maxPlayers);
          
          renderTable(allPlayers.slice(0, playersToShow));

          if (allPlayers.length > playersToShow) {
            loadMoreBtn.style.display = 'inline-block';
          }
          
        } catch (error) {
          console.error("Failed to fetch or parse rankings data:", error);
          tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: red;">Failed to load data. Please try again later.</td></tr>';
        }
      }

      loadMoreBtn.addEventListener('click', loadMorePlayers);

      fetchDataAndRenderTable().then(() => {
        setupSorting();
        const rankHeader = table.querySelector('th[data-column-index="0"]');
        if (rankHeader) {
          rankHeader.click();
        }
      });
    });
  </script>
{% endblock %}